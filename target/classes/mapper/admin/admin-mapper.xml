<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >



<mapper namespace="adminMapper">

<!--  ===================================== 회원 시작 ================================================ -->
	<!-- 사용자 조회 -->
	<select id="selectAllUser" resultType="user">
		SELECT * 
		FROM USERS
		WHERE STATUS = 'Y'
		ORDER BY LOGIN_TYPE 
	</select>
	
	<!-- 사용자 삭제 -->
	<update id="deleteUser" parameterType="user">
	    UPDATE USERS
	    SET STATUS = 'N'
	    
	    	WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 블랙리스트 삽입 -->
	<insert id="blackListInsert" parameterType="blackList">
		INSERT INTO BLACKLIST
		VALUES (
				SEQ_BLACKNO.NEXTVAL,
				#{reason},
				SYSDATE,
				#{userNo},
				SYSDATE,
				'N'
		)
	</insert>
	
	<!-- 회원정보 확인 -->
	<select id="getUserOne" resultType="user">
		SELECT *
		FROM USERS
			WHERE USER_NO = #{userNo}
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="updateUserInfo" parameterType="user"> 
		UPDATE USERS
		SET USER_NAME = #{userName},
			 PHONE = #{phone}, 
			 ADDRESS = #{address}
			WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 이름검색 -->
	<select id="searchUserByName" resultType="user">
		SELECT *
		FROM USERS
		WHERE USER_NAME like '%${userName}%'
		AND STATUS = 'Y'
	</select>
	
	<!-- 블랙리스트 조회 -->
	<select id="blackListView" resultType="blackList">
		SELECT * 
		FROM BLACKLIST
		WHERE STATUS = 'N'
	</select>
	
	<!-- USERS 테이블 회원 정지 풀기 -->
	<update id="releseStop" parameterType="user">
		UPDATE USERS
		SET STATUS = 'Y'
			WHERE USER_NO = #{userNo}
	</update>
	
	<!-- BLACKLIST 테이블 회원 정지 풀기 -->
	<update id="modifyUserStop" parameterType="blackList">
		UPDATE BLACKLIST
		SET STATUS = 'Y'
			WHERE USER_NO = #{userNo}
	</update>
	
	
	<!-- 블랙리스트 회원번호 검색 -->
	<select id="searchByUserNo" resultType="blackList">
		SELECT *
		FROM BLACKLIST
			WHERE USER_NO = #{userNo}
			 AND STATUS = 'N'
	</select>
	
<!--  ===================================== 회원 끝 ================================================ -->
	
	
<!--  ===================================== 채팅 시작 ================================================ -->	
	
		<!-- 채팅방 목록 -->
		<select id="selectChatRoomList" resultType="chat">
			SELECT
			    CHAT_NO,
			    CHAT_TITLE,
			    USER_NAME,
			    USER_NO,
			    (SELECT COUNT(*) FROM CHAT_JOIN CRJ WHERE CRJ.CHAT_NO = CR.CHAT_NO) AS CNT
			FROM CHAT CR
			JOIN USERS USING(USER_NO)
			WHERE CR.STATUS = 'Y'
			ORDER BY CHAT_NO DESC
		</select>
		
		<!-- 채팅방 조인 조회 -->
		<select id="selectJoinList" resultType="chatJoin">
			SELECT *
		    FROM CHAT_JOIN
		</select>
		
		<!-- 채팅방 생성 -->
		<insert id="openChatRoom" parameterType="chat" useGeneratedKeys="true">
		
			INSERT INTO CHAT VALUES
			(SEQ_CHATNO.NEXTVAL, #{chatTitle} , 'Y' , #{userNo})
			
			<selectKey keyProperty="chatNo" resultType="int" order="AFTER">
				SELECT SEQ_CHATNO.CURRVAL FROM DUAL
			</selectKey>
		</insert>
		
		<!-- 사용자가 채팅방 입장 했는지 조회-->
		<select id="joinCheck" parameterType="chatJoin" resultType="int">
			SELECT
				COUNT(*)
			FROM CHAT_JOIN
			WHERE CHAT_NO = #{chatNo} 
				AND USER_NO = #{userNo}
				AND STATUS = 'Y'
		</select>
		
		<!-- 처음 참가한 사용자는 insert -->
		<insert id="joinChatRoom" parameterType="chatJoin">
			INSERT INTO CHAT_JOIN
			VALUES(#{userNo}, #{chatNo}, 'Y')
		</insert>
		
		<!-- 이미 참가했던 사용자는 메세지만 select -->
		<select id="selectChatMessage" parameterType="int" resultType="chatMessage">
		    SELECT
		        CM.MESSAGE,
		        TO_CHAR(CM.CREATE_DATE, 'YYYY-MM-DD HH24:MI') AS CREATE_DATE,
		        U.USER_NAME,
		        U.USER_NO,
		        CM.CM_NO,
		        CH.CHAT_TITLE
		    FROM CHAT_MESSAGE CM
		    JOIN USERS U ON CM.USER_NO = U.USER_NO
		    JOIN CHAT CH ON CM.CHAT_NO = CH.CHAT_NO
		    WHERE CM.CHAT_NO = #{chatNo}
		    ORDER BY CM.CM_NO
		</select>

		<!-- chat 채팅방 삭제 -->
		<update id="deleteChat" parameterType="chat">
			UPDATE CHAT
			SET STATUS = 'N'
			WHERE USER_NO = #{userNo}
			 AND CHAT_NO = #{chatNo}
		</update>
		
		<!-- chatJoin 채팅방 삭제  -->
		<update id="deleteUserChat" parameterType="chatJoin">
			UPDATE CHAT_JOIN
			SET STATUS = 'N'
			WHERE USER_NO = #{userNo}
			 AND CHAT_NO = #{chatNo}
		</update>
		
		<!-- 채팅방 제목 검색 -->
		<select id="chatByName" resultType="chat">
			SELECT *
			FROM CHAT
				WHERE CHAT_TITLE like '%${chatTitle}%'
		</select>
			
			
		
		

<!--  ===================================== 채팅 끝 ================================================ -->


<!--  ===================================== 대시보드 통계 시작 ================================================== -->
		
		<!-- 회원 리스트 카운트 -->
		<select id="dashboardUser" resultType="user">
			SELECT COUNT(*) AS totalUsers
			FROM USERS
				WHERE STATUS = 'Y'
		</select>
		
		<!-- 후원금액 총 합계 -->
		<select id="dashboardAmount" resultType="int">
		    SELECT SUM(DONATE_AMOUNT) AS totalAmount
		    FROM DONATE_INFO
		</select>
		
		<!-- 게시글 수 합계 -->
		<select id="dashboardTotalBoardCount" resultType="int">
			SELECT COUNT(*) AS totalBoard
			FROM BOARD
				WHERE STATUS = 'Y'
		</select>
		
		<!-- 채팅방 수 합계 -->
		<select id="dashboardChatTotalCount" resultType="int">
			SELECT COUNT(*) AS totalChat
			FROM CHAT
				WHERE STATUS = 'Y'
		</select>
		
		<!-- 기부금액 그래프 -->
		<select id="getDailyIncome" resultType="PaymentInfo">
			SELECT *
			FROM DONATE_INFO
			ORDER BY CREATE_DATE ASC
		</select>
		
		<!-- donate 뽑기 -->
		<select id="selectDonate" resultType="PaymentInfo">
			SELECT *
			FROM DONATE_INFO
			ORDER BY CREATE_DATE ASC
		</select>
		
		<!-- userList -->
		<select id="dashboarduserList" resultType="user">
			SELECT *
			FROM USERS
		</select>
	
<!--  ===================================== 대시보드 통계 끝 ================================================== -->

		<!--  ===================================== 신고시작================================================ -->

	<select id="reportBoardList" resultType="report">
		SELECT REPORT_NO, REPORT_CONTENT, USER_NAME, EMAIL, REPORT_DATE,BOARD_NO,
		 CASE 
        WHEN REPLY_NO = 0 THEN '없음' 
          WHEN REPLY_NO IS NULL THEN '없음'
        ELSE TO_CHAR(REPLY_NO) 
    	END AS REPLY_NO 
		FROM REPORT R
		LEFT JOIN USERS U ON (R.USER_NO = U.USER_NO)
		WHERE R.STATUS = 'Y' AND (REPLY_NO = 0 OR REPLY_NO IS NULL)
		ORDER BY REPORT_NO DESC
	</select>

	<select id="reportReplyList" resultType="report">
		SELECT REPORT_NO, REPORT_CONTENT, USER_NAME, EMAIL, REPORT_DATE,BOARD_NO,
		 CASE 
        WHEN REPLY_NO = 0 THEN '없음' 
        ELSE TO_CHAR(REPLY_NO) 
    	END AS REPLY_NO 
		FROM REPORT R
		LEFT JOIN USERS U ON (R.USER_NO = U.USER_NO)
		WHERE R.STATUS = 'Y' AND (REPLY_NO != 0 OR REPLY_NO IS NOT NULL)
		ORDER BY REPORT_NO DESC
	</select>
	<update id="deleteReport">
		UPDATE REPORT
		SET STATUS='N'
		WHERE REPORT_NO = #{reportNo}
	</update>
	<update id="deleteBoardReport">
		UPDATE BOARD
		SET STATUS='N'
		WHERE BOARD_NO = #{boardNo}
	</update>
	<update id="deleteReportList">
		UPDATE REPORT
		SET STATUS='N'
		WHERE BOARD_NO=#{boardNo}
	</update>
	<select id="adminMapper.selectReply" resultType="reply">
		SELECT REPLY_NO, REPLY_CONTENT, CREATE_DATE, EMAIL, BOARD_NO
		FROM REPLY R
		LEFT JOIN USERS U ON (R.USER_NO=U.USER_NO)
		WHERE REPLY_NO =#{replyNo} 		
	</select>
	<update id="deleteReplyDatailReport">
		UPDATE REPLY
		SET STATUS='N'
		WHERE REPLY_NO = #{replyNo}
	</update>
	<update id="deleteReportReplyList">
		UPDATE REPORT
		SET STATUS='N'
		WHERE REPLY_NO=#{replyNo}
	</update>
	
	<!-- 댓글관리 -->
	<select id="ReplyList" resultType="reply">
		SELECT REPLY_NO, REPLY_CONTENT, R.CREATE_DATE, EMAIL, R.BOARD_NO, BOARD_TYPE_NAME
		FROM USERS U
        LEFT JOIN  REPLY R ON (R.USER_NO=U.USER_NO)
		LEFT JOIN BOARD B ON(R.BOARD_NO=B.BOARD_NO)
        LEFT JOIN BOARD_TYPE T ON (B.BOARD_TYPE_NO = T.BOARD_TYPE_NO)		
		WHERE R.STATUS='Y'
		ORDER BY REPLY_NO DESC
	</select>
		<select id="ReplyTodayList" resultType="reply">
		SELECT REPLY_NO, REPLY_CONTENT, R.CREATE_DATE, EMAIL, R.BOARD_NO, BOARD_TYPE_NAME
		FROM USERS U
		LEFT JOIN  REPLY R ON (R.USER_NO=U.USER_NO)
		LEFT JOIN BOARD B ON(R.BOARD_NO=B.BOARD_NO)
		LEFT JOIN BOARD_TYPE T ON (B.BOARD_TYPE_NO = T.BOARD_TYPE_NO)     
		WHERE R.STATUS='Y' AND TRUNC(R.CREATE_DATE) = TRUNC(SYSDATE)
		ORDER BY REPLY_NO DESC

	</select>
	
	<!-- 게시판관리-->
	<select id="productList" resultType="product">
		SELECT PRODUCT_NO,PRODUCT_TYPE,PUSER_NAME,PHONE,EMAIL,PRODUCT_AMOUNT,STATUS,INQUIRY_CONTENT,PRODUCT_DATE,CATEGORY_NAME
		FROM DONATE_PRODUCT DP
		LEFT JOIN PRODUCT_CATEGORY PC ON (DP.CATEGORY_NO=PC.CATEGORY_NO)
		WHERE STATUS ='Y'
	 	AND PRODUCT_WAY='택배'
	</select>
	
	
	<!-- 봉사활동리스트 -->
	<select id="selectProgramCount" resultType="int">
		SELECT COUNT(*)
		FROM PROGRAM
		WHERE STATUS='Y'
		<if test="keyword!=null and keyword != ''">
			AND
			<choose>
				<when test="condition == 'title'">
					PROGRAM_NAME LIKE '%${keyword}%'
				</when>

			</choose>
		</if>
	</select>
	<select id="programList" parameterType="hashMap"
		resultType="program">
		SELECT PROGRAM_NO, PROGRAM_NAME,
		TO_CHAR(PROGRAM_ACTIVITY_START_DATE, 'YYYY"년" MM"월" DD"일"')
		PROGRAM_ACTIVITY_START_DATE,
		TO_CHAR(PROGRAM_ACTIVITY_END_DATE,
		'YYYY"년" MM"월" DD"일"')
		PROGRAM_ACTIVITY_END_DATE,
		ACTIVITY_DAYS,
		ACTIVITY_TIME,
		SUBSTR(ACTIVITY_LOCATION,3) AS ACTIVITY_LOCATION,
		TO_CHAR(PROGRAM_ENROLL_END_DATE,
		'YYYY"년" MM"월" DD"일"')
		PROGRAM_ENROLL_END_DATE

		FROM
		PROGRAM
		WHERE
		STATUS='Y'

		<if test="keyword!=null and keyword != ''">
			AND
			<choose>
				<when test="condition == 'title'">
					PROGRAM_NAME LIKE '%${keyword}%'
				</when>

			</choose>
		</if>
		ORDER BY PROGRAM_NO DESC
	</select>
	
	<!-- 후원 목록 -->
	<select id="donateList" parameterType="hashmap" resultType="donate">
		SELECT SUM_DONATE, 
		       DONATE_HOPE, 
		       DONATE_NO, 
		       DONATE_TITLE, 
		       SUM_DONATE / DONATE_HOPE * 100 AS ACH_RATE, 
		       TAG_ID, 
		       DONATE_FOUNDATION, 
		       CEIL(ABS(TRUNC(DONATE_END_DATE) - TRUNC(DONATE_START_DATE))) AS CEIL_DAY_DIFF,
		       DONATE_CREATE_DATE, COUNT, DONATE_END_DATE,
       		   CHANGE_NAME
		FROM (
		    SELECT SUM(DONATE_AMOUNT) AS SUM_DONATE, 
		           d.DONATE_HOPE , 
		           d.DONATE_NO, 
		           d.DONATE_TITLE, 
		           d.TAG_ID, 
		           d.DONATE_FOUNDATION, 
		           DONATE_END_DATE, 
		           DONATE_START_DATE,
		           d.DONATE_CREATE_DATE, d.COUNT
		    FROM DONATE_BOARD d
		    LEFT JOIN DONATE_INFO i ON d.DONATE_NO = i.DONATE_NO
		    WHERE STATUS = 'Y' AND DONATE_START_DATE &lt;= SYSDATE
		    <if test="keyword != null and keyword != ''">  
		    	AND
			    <choose>
				    <when test="condition.equals('title')">
						DONATE_TITLE LIKE '%${keyword}%'
					</when>
					<when test="condition.equals('foundation')">
						DONATE_FOUNDATION LIKE '%' || #{keyword} || '%'
					</when>
				</choose>
			</if>
		    GROUP BY d.DONATE_HOPE, d.DONATE_NO, d.DONATE_TITLE, d.TAG_ID, d.DONATE_FOUNDATION, DONATE_END_DATE, DONATE_START_DATE, d.DONATE_CREATE_DATE, d.COUNT
		)
		LEFT JOIN ATTACHMENT ON
		DONATE_NO = REF_FNO
		ORDER BY DONATE_CREATE_DATE DESC
	</select>
		<select id="selectDonateCount" resultType="int">
		SELECT COUNT(*)
		FROM (
		    SELECT SUM(DONATE_AMOUNT) AS SUM_DONATE, 
		           d.DONATE_HOPE , 
		           d.DONATE_NO, 
		           d.DONATE_TITLE, 
		           d.TAG_ID, 
		           d.DONATE_FOUNDATION, 
		           DONATE_END_DATE, 
		           DONATE_START_DATE,
		           d.DONATE_CREATE_DATE, d.COUNT
		    FROM DONATE_BOARD d
		    LEFT JOIN DONATE_INFO i ON d.DONATE_NO = i.DONATE_NO
		    WHERE STATUS = 'Y' AND DONATE_START_DATE &lt;= SYSDATE
		    <if test="keyword != null and keyword != ''">  
		    	AND
			    <choose>
				    <when test="condition.equals('title')">
						DONATE_TITLE LIKE '%${keyword}%'
					</when>
					<when test="condition.equals('foundation')">
						DONATE_FOUNDATION LIKE '%' || #{keyword} || '%'
					</when>
				</choose>
			</if>
		    GROUP BY d.DONATE_HOPE, d.DONATE_NO, d.DONATE_TITLE, d.TAG_ID, d.DONATE_FOUNDATION, DONATE_END_DATE, DONATE_START_DATE, d.DONATE_CREATE_DATE, d.COUNT
		)
		LEFT JOIN ATTACHMENT ON
		DONATE_NO = REF_FNO
		ORDER BY DONATE_CREATE_DATE DESC
	</select>
	<!-- 댓글 삭제 -->
	<update id="deleteReply">
		UPDATE REPLY
		SET STATUS='N'
		WHERE REPLY_NO = #{replyNo}
	</update>
	<!-- 물품수령 -->
	<update id="confirmProduct">
		UPDATE DONATE_PRODUCT
		SET STATUS='N'
		WHERE PRODUCT_NO=#{productNo}
	</update>
	<!-- 물품 삭제 -->
	<delete id="deleteProduct">
		DELETE FROM DONATE_PRODUCT
		WHERE PRODUCT_NO=#{productNo} 
	</delete>
	<select id="productConfirmList" resultType="product">
		SELECT
		PRODUCT_NO,PRODUCT_TYPE,BUSINESS_NAME,PUSER_NAME,PHONE,EMAIL,PRODUCT_AMOUNT,STATUS,INQUIRY_CONTENT,PRODUCT_DATE,CATEGORY_NAME
		FROM DONATE_PRODUCT DP
		LEFT JOIN PRODUCT_CATEGORY PC ON
		(DP.CATEGORY_NO=PC.CATEGORY_NO)
		WHERE STATUS ='N'
		AND PRODUCT_WAY='택배'
	</select>
	<!-- 프로그램명단 -->
	<select id="programPeople" resultType="program">
		SELECT P.PROGRAM_NO, USER_NAME, EMAIL, PHONE
		FROM PROGRAM P
		LEFT JOIN REQUEST R ON (P.PROGRAM_NO=R.PROGRAM_NO)
		LEFT JOIN USERS U ON (R.USER_NO=U.USER_NO)
		WHERE P.PROGRAM_NO = #{programNo}
		
	</select>
	<select id="programPeopleCount" resultType="program">
		SELECT PROGRAM_NAME,COUNT(*) AS COUNT
		FROM PROGRAM P
		LEFT JOIN REQUEST R ON (P.PROGRAM_NO=R.PROGRAM_NO)
		LEFT JOIN USERS U ON (R.USER_NO=U.USER_NO)
		WHERE P.PROGRAM_NO = #{programNo}
		GROUP BY P.PROGRAM_NAME		
	</select>
	<!-- 프로그램삭제 -->
	<update id="deleteProgram">
		UPDATE PROGRAM
		SET STATUS='N'
		WHERE PROGRAM_NO=#{programNo}
	</update>
	<!-- 후원삭제 -->
	<update id="deleteDonate">
		UPDATE DONATE_BOARD
		SET STATUS='N'
		WHERE DONATE_NO=#{donateNo}
	</update>
	
	<!-- 봉사활동 종료 리스트 -->
	<select id="selectProgramEndList" resultType="program">
		SELECT 
		    PROGRAM_NO, 
		    PROGRAM_NAME, 
		    TO_CHAR(PROGRAM_ACTIVITY_START_DATE, 'YYYY-MM-DD') AS PROGRAM_ACTIVITY_START_DATE, 
    		TO_CHAR(PROGRAM_ACTIVITY_END_DATE, 'YYYY-MM-DD') AS PROGRAM_ACTIVITY_END_DATE,  
		    ACTIVITY_LOCATION,
		    PROGRAM_CAPACITY,
		    ACTIVITY_TIME, 
		    ACTIVITY_DAYS,
		    (SELECT COUNT(*) FROM REQUEST R WHERE R.PROGRAM_NO = P.PROGRAM_NO) AS REQUEST_TOTAL
		FROM 
		    PROGRAM P
		WHERE 
		    P.STATUS = 'Y' AND REPORT_TYPE = 'N'
		    AND P.PROGRAM_ACTIVITY_END_DATE &lt; SYSDATE 
		    AND TRUNC(P.PROGRAM_ACTIVITY_END_DATE) &lt;&gt; TRUNC(SYSDATE)
	</select>
	
	<!-- 후원모집 종료 리스트 -->
	<select id="selectDonateEndList" resultType="donate">
		SELECT 
		    SUM_DONATE, 
		    DONATE_HOPE, 
		    DONATE_NO, 
		    DONATE_TITLE, 
		    ACH_RATE, 
		    DONATE_FOUNDATION, 
		    CEIL_DAY_DIFF, 
		    DONATE_CREATE_DATE, 
		    COUNT, 
		    DONATE_CONTENT,
		    DONATE_START_DATE, 
		    DONATE_END_DATE, 
		    TOTAL_COUNT,
		    TAG_NAME,
		    ORIGIN_NAME,
		    CHANGE_NAME,
		    FILE_NO
		FROM (
		    SELECT 
		        SUM(DONATE_AMOUNT) AS SUM_DONATE, 
		        d.DONATE_HOPE, 
		        d.DONATE_NO, 
		        d.DONATE_TITLE,  
		        d.DONATE_FOUNDATION, 
		        DONATE_END_DATE, 
		        DONATE_START_DATE,
		        d.TAG_ID,
		        d.DONATE_CREATE_DATE, 
		        d.COUNT,  
		        COUNT(i.DONATE_NO) AS TOTAL_COUNT,
		        ABS(TRUNC(DONATE_END_DATE) - TRUNC(SYSDATE)) AS CEIL_DAY_DIFF,
		        SUM(DONATE_AMOUNT) / d.DONATE_HOPE * 100 AS ACH_RATE,
		        t.TAG_NAME
		    FROM 
		        DONATE_BOARD d
		    LEFT JOIN 
		        DONATE_INFO i ON d.DONATE_NO = i.DONATE_NO
		    LEFT JOIN 
		        DONATE_TAG t ON d.TAG_ID = t.TAG_ID
		    WHERE 
		        STATUS = 'Y' AND REPORT_STATUS = 'N'
                AND DONATE_END_DATE &lt; SYSDATE AND TRUNC(DONATE_END_DATE) &lt;&gt; TRUNC(SYSDATE)
		    GROUP BY 
		        d.DONATE_HOPE, 
		        d.DONATE_NO, 
		        d.DONATE_TITLE, 
		        d.TAG_ID, 
		        d.DONATE_FOUNDATION, 
		        DONATE_END_DATE, 
		        DONATE_START_DATE, 
		        d.DONATE_CREATE_DATE, 
		        d.COUNT, 
		        t.TAG_NAME
		) 
		LEFT JOIN (
		    SELECT DONATE_CONTENT, DONATE_NO AS DNO
		    FROM DONATE_BOARD
		) ON DONATE_NO = DNO
		LEFT JOIN (
		    SELECT ORIGIN_NAME, CHANGE_NAME, REF_FNO, FILE_NO
		    FROM ATTACHMENT
		)ON DONATE_NO = REF_FNO
	</select>
	
	<!-- 활동보고서 봉사 리스트 -->
	<select id="selectReportList" resultType="activityReport">
		SELECT PROGRAM_NO, PROGRAM_ACTIVITY_START_DATE, PROGRAM_ACTIVITY_END_DATE, a.CREATE_DATE AS CREATE_DATE,
		       ACTIVITY_TIME, ACTIVITY_DAYS, ACTIVITY_LOCATION, PROGRAM_CAPACITY,
		       (SELECT COUNT(*) FROM REQUEST R WHERE R.PROGRAM_NO = P.PROGRAM_NO) AS REQUEST_TOTAL,
		       REPORT_NO, REPORT_TITLE, REPORT_CONTENT, REF_ANO
		FROM PROGRAM p
		INNER JOIN ACTIVITY_REPORT a ON REF_ANO = PROGRAM_NO
		WHERE a.REPORT_TYPE = 'P' AND p.REPORT_TYPE='Y' AND a.STATUS = 'Y'
		ORDER BY REPORT_NO DESC
	</select>
	
	<select id="selectDonateReportList" resultType="activityReport">
		SELECT 
		    SUM_DONATE, 
		    DONATE_HOPE, 
		    DONATE_NO, 
		    ACH_RATE, 
		    DONATE_FOUNDATION, 
		    COUNT, 
		    DONATE_START_DATE, 
		    DONATE_END_DATE, 
		    TOTAL_COUNT,
		    CHANGE_NAME,
		    FILE_NO,
            REPORT_NO,
            REPORT_TITLE,
            REPORT_CONTENT,
            CREATE_DATE
		FROM (
		    SELECT 
		        SUM(DONATE_AMOUNT) AS SUM_DONATE, 
		        d.DONATE_HOPE, 
		        d.DONATE_NO, 
		        d.DONATE_TITLE,  
		        d.DONATE_FOUNDATION, 
		        DONATE_END_DATE, 
		        DONATE_START_DATE,
		        d.TAG_ID,
		        d.DONATE_CREATE_DATE, 
		        d.COUNT,  
		        COUNT(i.DONATE_NO) AS TOTAL_COUNT,
		        ABS(TRUNC(DONATE_END_DATE) - TRUNC(SYSDATE)) AS CEIL_DAY_DIFF,
		        SUM(DONATE_AMOUNT) / d.DONATE_HOPE * 100 AS ACH_RATE,
		        t.TAG_NAME
		    FROM 
		        DONATE_BOARD d
		    LEFT JOIN 
		        DONATE_INFO i ON d.DONATE_NO = i.DONATE_NO
		    LEFT JOIN 
		        DONATE_TAG t ON d.TAG_ID = t.TAG_ID
		    WHERE 
		        STATUS = 'Y' 
                AND DONATE_END_DATE &lt; SYSDATE AND TRUNC(DONATE_END_DATE) &lt;&gt; TRUNC(SYSDATE)
		    GROUP BY 
		        d.DONATE_HOPE, 
		        d.DONATE_NO, 
		        d.DONATE_TITLE, 
		        d.TAG_ID, 
		        d.DONATE_FOUNDATION, 
		        DONATE_END_DATE, 
		        DONATE_START_DATE, 
		        d.DONATE_CREATE_DATE, 
		        d.COUNT, 
		        t.TAG_NAME
		) 
		LEFT JOIN (
		    SELECT DONATE_CONTENT, DONATE_NO AS DNO
		    FROM DONATE_BOARD
		) ON DONATE_NO = DNO
		LEFT JOIN (
		    SELECT ORIGIN_NAME, CHANGE_NAME, REF_FNO, FILE_NO
		    FROM ATTACHMENT
		)ON DONATE_NO = REF_FNO
        LEFT JOIN (
            SELECT REPORT_NO, REPORT_TITLE, REPORT_CONTENT, REF_ANO, REPORT_TYPE, STATUS, CREATE_DATE
            FROM ACTIVITY_REPORT
            WHERE STATUS = 'Y'
        )ON DONATE_NO = REF_ANO 
        WHERE REPORT_TYPE= 'D' AND REF_ANO = DONATE_NO AND STATUS = 'Y'
        ORDER BY REPORT_NO DESC
	</select>
	

</mapper>